// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  role        Role         @default(COMPANY)
  status      UserStatus   @default(ACTIVE)
  information String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Balance     Balance      @relation(fields: [balanceId], references: [id])
  Extract     Extract[]
  balanceId   Int
  DeliveryMan DeliveryMan?
  Company     Company?

  @@map("users")
}

model Adress {
  id         Int       @id @default(autoincrement())
  street     String
  number     String
  city       String
  state      String
  zipCode    String
  country    String
  complement String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Company    Company[]

  @@map("adresses")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  cnpj      String   @unique
  idAddress Int
  Adress    Adress   @relation(fields: [idAddress], references: [id])
  idUser    Int      @unique
  User      User     @relation(fields: [idUser], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Balance {
  id        Int      @id @default(autoincrement())
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]

  @@map("balances")
}

model Extract {
  id        Int         @id @default(autoincrement())
  amount    Float       @default(0)
  type      ExtractType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("extracts")
}

enum ExtractType {
  DEPOSIT
  WITHDRAW
}

enum Role {
  ADMIN
  DELIVERY
  COMPANY
}

model DeliveryMan {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  phone     String
  address   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  Delivery  Delivery[]

  @@map("deliverymen")
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Localization {
  id         Int       @id @default(autoincrement())
  latitude   Float
  longitude  Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId Int?

  @@map("localizations")
}

model Delivery {
  id     Int            @id @default(autoincrement())
  code   String         @unique
  higth  Float
  width  Float
  length Float
  weight Float
  price  Float
  info   String[]
  status DeliveryStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DeliveryMan   DeliveryMan?   @relation(fields: [deliveryManId], references: [id])
  deliveryManId Int?
  Localization  Localization[]

  @@map("deliveries")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  number    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client[]

  @@map("addresses")
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  Adress    Address  @relation(fields: [addressId], references: [id])
  addressId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}
